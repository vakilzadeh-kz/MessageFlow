# Name for your workflow, which will be displayed in the "Actions" tab on GitHub
name: Kotlin CI with Gradle

# Controls when the workflow will run
on:
  # Triggers the workflow on push events for the "main" branch
  push:
    branches: [ "main" ]
  # Triggers the workflow on pull request events targeting the "main" branch
  pull_request:
    branches: [ "main" ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Step 1: Checks out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Sets up a JDK environment for your build
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Step 3: Sets up Gradle with caching for faster builds
      # This action caches dependencies and build outputs to improve workflow execution time
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      # Step 4: Grant execute permission for the gradlew script
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Step 5: Run the build command to generate the APK
      # This command compiles the code and assembles the debug APK
      - name: Build debug APK with Gradle
        run: ./gradlew assembleDebug

      # Step 6: Upload the APK as a build artifact
      # This action takes the generated APK and uploads it so it can be downloaded from the workflow run page
      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: app-debug-apk
          path: app/build/outputs/apk/debug/app-debug.apk
